package first;
//Further short cut to lambda exp===>Method references--->to call a method 
//can all lambda expressions be concised into method ref===>NO But converse is true

//In Java 8 we can use the method as if they were objects or primitive values, 
//and we can treat them as a variable. The example shows the function as a variable in java:

//This square function is a variable getSquare. 
//Function<Integer, Integer> getSquare = i -> i * i; 
//SomeFunction(a, b, getSquare); 
//Pass function as a argument to other function easily 


//Sometimes, a lambda expression only calls an existing method. In those cases,
//it looks clear to refer to the existing method by name. The method references
//can do this, they are compact, easy-to-read as compared to lambda expressions.
//A method reference is the shorthand syntax for a lambda expression that 
//contains just one method call. Here’s the general syntax of a 
//
//Generic syntax: Method reference
//To refer to a method in an object 
//
//Object :: methodName 

//Example
//To print all elements in a list
//
//Following is an illustration of a lambda expression that just calls a single method in its entire execution: 
//
//list.forEach(s -> System.out.println(s)); 

//Shorthand to print all elements in a list 
//
//To make the code clear and compact, In the above example, one can turn lambda expression into a method reference:
//
//list.forEach(System.out::println); 

//The method references can only be used to replace a single method of the lambda expression.
//A code is more clear and short if one uses a lambda expression rather than using an anonymous 
//class and one can use method reference rather than using a single function lambda expression to
//achieve the same. In general, one doesn’t have to pass arguments to method references.

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Studen{
	int id;
	String str;
	public Studen(int id, String str) {
		this.id = id;
		this.str = str;
	}
	@Override
	public String toString() {
		return "Studen [id=" + id + ", str=" + str + "]";
	}
	
	
}
public class Ninetyeight {
public static void main(String [] args) {
	List<Studen> l=new ArrayList<>();
	int a=0;
	l.add(new Studen(1,"roshan"));
	l.add(new Studen(5,"rohan"));
	l.add(new Studen(2,"rohit"));
	l.add(new Studen(4,"roshani"));
	System.out.println(l);
	Map<Integer,Studen> m=new HashMap<>();
	for(Studen s:l) {
		a++;
		m.put(a,s);
	}
	//display all students (list) using declarative (fun) style
	l.forEach(s->System.out.print(s+" "));
	System.out.println();
	
	//display all student details(Map)
	m.forEach((k,v)->System.out.print(v+" "));
	
}
}



